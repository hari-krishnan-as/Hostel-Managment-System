<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Mess Bill Overview</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
</head>

<body class="bg-[#16213E] text-[#FFFFFF] flex flex-col md:flex-row min-h-screen">
  
  <!-- Sidebar -->
  <aside class="w-full md:w-64 bg-[#1A1A2E] flex md:flex-col justify-between py-4 md:py-8 border-b md:border-r border-[#0F3460]">
    <nav class="flex-1 px-4 md:px-8">
      <h2 class="text-base md:text-lg font-bold text-red-500 mb-4 md:mb-6 uppercase tracking-wide bg-[#0F3460] p-2 md:p-3 rounded-md text-center">
        Dashboard
      </h2>
      <ul class="flex md:flex-col space-x-4 md:space-x-0 md:space-y-4 overflow-x-auto md:overflow-visible">
        <li><a href="/user/dashboard" class="flex items-center space-x-3 p-2 pl-3 rounded-md hover:bg-[#0F3460] transition"><i class="fas fa-home text-[#E94560]"></i><span>Home</span></a></li>
        <li><a href="/user/attendance" class="flex items-center space-x-3 p-2 pl-3 rounded-md hover:bg-[#0F3460] transition"><i class="fas fa-user-check text-[#E94560]"></i><span>Attendance</span></a></li>
        <li><a href="/user/mess-bill" class="flex items-center space-x-3 p-2 pl-3 rounded-md bg-[#0F3460] border-l-4 border-[#E94560]"><i class="fas fa-receipt text-[#E94560]"></i><span>Mess Bill</span></a></li>
        <li><a href="/user/mess-cut" class="flex items-center space-x-3 p-2 pl-3 rounded-md hover:bg-[#0F3460] transition"><i class="fas fa-utensils text-[#E94560]"></i><span>Mess Cut Leave</span></a></li>
        <li><a href="/user/complaints" class="flex items-center space-x-3 p-2 pl-3 rounded-md hover:bg-[#0F3460] transition"><i class="fas fa-exclamation-circle text-[#E94560]"></i><span>Complaints</span></a></li>
        <li><a href="/user/suggestions" class="flex items-center space-x-3 p-2 pl-3 rounded-md hover:bg-[#0F3460] transition"><i class="fas fa-lightbulb text-[#E94560]"></i><span>Suggestions</span></a></li>
      </ul>
    </nav>
    <div class="px-4 md:px-8 mt-2 md:mt-auto">
      <a href="/logout" class="flex items-center space-x-3 p-2 rounded-md text-[#EEEEEE] hover:text-[#E94560] transition"><i class="fas fa-sign-out-alt"></i><span class="font-semibold">Log Out</span></a>
    </div>
  </aside>

  <!-- Main Section -->
  <div class="flex flex-col flex-1">
    <header class="w-full flex items-center justify-between py-4 px-6 bg-[#0F3460] text-white">
      <button id="menu-btn" class="md:hidden focus:outline-none">
        <i class="fas fa-bars text-2xl"></i>
      </button>

      <div class="flex items-center space-x-6 ml-auto">
        <a href="/user/notifications" class="relative hover:text-gray-400 transition focus:outline-none">
          <i class="fas fa-bell text-lg"></i>
          {{#if notificationCount}}
          <span class="absolute -top-2 -right-2 bg-red-600 text-white text-xs font-bold px-2 py-0.5 rounded-full">
            {{notificationCount}}
          </span>
          {{/if}}
        </a>
        <a href="/user/settings" class="hover:text-gray-400 transition"><i class="fas fa-cog text-lg"></i></a>
        <a href="/user/profile" class="hover:text-gray-400 transition"><i class="fas fa-user-circle text-lg"></i></a>
      </div>
    </header>

    <main 
      id="mess-bill-main" 
      class="p-6 flex-1" 
      data-has-bills="{{#if bills}}true{{else}}false{{/if}}"
    >
      <h2 class="text-xl font-bold mb-6 text-pink-500 flex items-center space-x-2">
        <i class="fas fa-receipt"></i><span>Mess Bill Overview</span>
      </h2>

      <div id="bill-status-area" class="mb-8 max-w-xl mx-auto">
        <p class="text-center text-gray-400 py-4"><i class="fas fa-spinner fa-spin mr-2"></i> Checking for bills...</p>
      </div>

      <div id="history-table-container" class="hidden transition-opacity duration-300">
        <h3 class="text-xl font-semibold mb-4 text-red-300 flex items-center space-x-2 pt-4 border-t border-[#0F3460] mt-4">
          <i class="fas fa-history"></i><span>Full History Log</span>
        </h3>

        {{#if bills}}
        <div class="overflow-x-auto bg-[#1A1A2E] rounded-lg shadow-lg">
          <table class="min-w-full divide-y divide-[#0F3460]">
            <thead class="bg-[#0F3460]">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium uppercase text-white">Billing Cycle</th>
                <th class="px-6 py-3 text-right text-xs font-medium uppercase text-white">Your Bill</th>
                <th class="px-6 py-3 text-right text-xs font-medium uppercase text-white">Present Days</th>
                <th class="px-6 py-3 text-right text-xs font-medium uppercase text-white hidden sm:table-cell">Rate/Day</th>
                <th class="px-6 py-3 text-right text-xs font-medium uppercase text-white hidden lg:table-cell">Total Expense</th>
              </tr>
            </thead>
            <tbody class="divide-y divide-[#0F3460]">
              {{#each bills}}
              <tr class="hover:bg-[#16213E] transition duration-150">
                <td class="px-6 py-4 text-sm font-medium text-red-300">{{this.displayDate}}</td>
                <td class="px-6 py-4 text-sm text-right font-bold text-green-400">{{this.formattedShare}}</td>
                <td class="px-6 py-4 text-sm text-right">{{this.presentDays}}</td>
                <td class="px-6 py-4 text-sm text-right hidden sm:table-cell">{{this.formattedRate}}</td>
                <td class="px-6 py-4 text-sm text-right hidden lg:table-cell">{{this.formattedTotalExpense}}</td>
              </tr>
              {{/each}}
            </tbody>
          </table>
        </div>
        {{else}}
        <div class="bg-[#0F3460] p-4 rounded-md text-center mt-8">
          <p class="text-lg text-gray-300">No mess bill history found yet.</p>
          <p class="text-sm text-gray-400 mt-2">The administrator generates the bill at the end of the month.</p>
        </div>
        {{/if}}
      </div>
    </main>
  </div>

  <!-- Wrapped script in raw block -->
 <script>
    const statusArea = document.getElementById('bill-status-area');
    const historyTableContainer = document.getElementById('history-table-container');
    const RAZORPAY_KEY_ID = 'rzp_test_RS7N4gK5yMwA9E'; 
    const PAYMENT_ENDPOINT = '/user/pay-bill';

    function renderLatestBillCard(latestBill, isNewBill) {
      // ... (Your existing render function logic remains the same)
      const cardClass = isNewBill ? 'bg-red-700 border-red-400' : 'bg-[#1A1A2E] border-[#0F3460]';
      const titleText = isNewBill ? 'NEW BILL GENERATED!' : 'Latest Bill Summary';
      const titleColor = isNewBill ? 'text-white' : 'text-pink-500';
      const topButtonText = isNewBill ? 'View New Bill Details & Clear Notification' : 'Show Full History Log';
      const topButtonAction = isNewBill ? 'viewAndClearFlag()' : 'showFullHistory()';
      const topButtonClass = isNewBill ? 'bg-white text-red-700 hover:bg-gray-200' : 'bg-white text-[#0F3460] hover:bg-gray-200';
      let payNowButtonHTML = '';
      let statusBadgeHTML = '';

      if (latestBill.isPaid) {
        statusBadgeHTML = '<span class="bg-green-500 text-white text-xs font-extrabold px-3 py-1 rounded-full"><i class="fas fa-check-circle mr-1"></i> PAID</span>';
        payNowButtonHTML = '<button disabled class="w-full mt-2 bg-gray-500 text-white px-4 py-2 rounded-md font-bold cursor-not-allowed opacity-75 shadow-md"><i class="fas fa-wallet mr-2"></i> Bill Paid</button>';
      } else {
        statusBadgeHTML = isNewBill ? '<span class="bg-yellow-300 text-red-700 text-xs font-extrabold px-3 py-1 rounded-full">NEW</span>' : '';
        payNowButtonHTML = `<button onclick="payNow(${latestBill.share}, '${latestBill.displayDate}', ${latestBill.presentDays})" class="w-full mt-2 bg-pink-500 text-[#16213E] px-4 py-2 rounded-md font-bold hover:bg-pink-600 transition shadow-md"><i class="fas fa-wallet mr-2"></i> Pay Now</button>`;
      }

      return `
        <div class="p-6 ${cardClass} rounded-lg shadow-xl border-4 transition-all duration-300">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-bold ${titleColor}"><i class="fas fa-receipt mr-2"></i>${titleText}</h3>
            ${statusBadgeHTML}
          </div>
          <div class="grid grid-cols-2 gap-4 border-t ${isNewBill ? 'border-red-500' : 'border-[#0F3460]'} pt-4">
            <div><p class="text-sm text-gray-400">Billing Cycle</p><p class="text-lg font-semibold">${latestBill.displayDate}</p></div>
            <div><p class="text-sm text-gray-400">Your Share</p><p class="text-2xl font-bold text-green-400">${latestBill.formattedShare}</p></div>
            <div class="col-span-2"><p class="text-sm text-gray-400">Present Days</p><p class="text-lg font-semibold">${latestBill.presentDays}</p></div>
          </div>
          <button onclick="${topButtonAction}" class="w-full mt-6 ${topButtonClass} px-4 py-2 rounded-md font-bold transition shadow-md">${topButtonText}</button>
          ${payNowButtonHTML}
        </div>`;
    }

    async function viewAndClearFlag() {
      statusArea.innerHTML = '<p class="text-center text-gray-400 py-6"><i class="fas fa-spinner fa-spin mr-2"></i> Finalizing bill...</p>';
      try {
        // This endpoint resets the flag AND fetches data, then reloads
        const response = await fetch('/user/fetch-latest-bill-data'); 
        
        // CRITICAL: Force a full reload AFTER clearing the flag. This ensures the 
        // server-side render sees the updated billingHistory.
        if (response.ok) window.location.reload(true); 
        else alert('Failed to finalize bill view.');
      } catch {
        alert('Network error. Please try again.');
      }
    }

    function showFullHistory() {
      historyTableContainer.classList.remove('hidden');
      historyTableContainer.scrollIntoView({ behavior: 'smooth' });
    }

    async function payNow(amount, billingCycle, presentDays) {
      const options = {
        key: RAZORPAY_KEY_ID,
        amount: Math.round(amount * 100),
        currency: "INR",
        name: "Hostel Mess Bill Payment",
        description: `Payment for ${billingCycle}`,
        image: "https://i.imgur.com/k28bEaE.png",
        handler: (response) => recordSuccessfulPayment(response, amount, billingCycle, presentDays),
        theme: { color: "#E94560" }
      };
      const rzp1 = new Razorpay(options);
      rzp1.open();
    }

    async function recordSuccessfulPayment(response, amount, billingCycle, presentDays) {
      statusArea.innerHTML = '<p class="text-center text-gray-400 py-6"><i class="fas fa-spinner fa-spin mr-2"></i> Recording payment...</p>';
      try {
        const res = await fetch(PAYMENT_ENDPOINT, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            amount, billingCycle, presentDays,
            razorpay_payment_id: response.razorpay_payment_id
          })
        });
        const result = await res.json();
        alert(result.message || 'Payment successful');
        window.location.reload();
      } catch {
        alert('Error recording payment. Please check with admin.');
      }
    }

    // CRITICAL FUNCTION: This logic ensures the page loads the current status every time.
    async function checkAndRenderBillCard() {
      // 1. Initially check the server-side HBS context for bill history.
      const hasHistoryServer = document.getElementById('mess-bill-main').getAttribute('data-has-bills') === 'true';
      
      // If the server says there's no history, display the "No bill" message immediately.
      if (!hasHistoryServer) {
        statusArea.innerHTML = `<div class="bg-[#0F3460] p-4 rounded-md text-center"><p class="text-lg text-gray-300">No mess bill history yet.</p><p class="text-sm text-gray-400 mt-2">Generated at month-end.</p></div>`;
        return;
      }
      
      // 2. If the server says there MIGHT be history, fetch the dynamic bill card data.
      try {
        // This is the core AJAX call that checks for the latest bill and the needsBillRefresh flag.
        const res = await fetch('/user/latest-bill-card-data'); 
        
        if (!res.ok) {
             // On API failure (404, 500), check the server-rendered history to see if it exists.
             // If the server rendered history is available, reveal it.
             if (hasHistoryServer) {
                 showFullHistory();
                 statusArea.innerHTML = '<p class="text-red-500 mt-2 text-center">Failed to load bill summary. Showing full history below.</p>';
                 return;
             }
             // Otherwise, show generic error.
             statusArea.innerHTML = `<p class="text-red-500 mt-4 text-center">Error loading bill summary (Status ${res.status}).</p>`;
             return;
        }
        
        const data = await res.json();

        if (data.success && data.latestBill) {
          statusArea.innerHTML = renderLatestBillCard(data.latestBill, data.isNewBill);
          
          // Show alert if the bill is new
          if (data.isNewBill) {
              alert('A new Mess Bill has been generated by the admin! Click "View New Bill Details" to finalize the view.');
          }
          
        } else {
            // This case occurs if the server-side check was TRUE but the API returned no latest bill data.
            // This should not happen, but if it does, show the full history.
            showFullHistory();
            statusArea.innerHTML = '<p class="text-red-500 mt-2 text-center">Bill summary not found. Showing full history log.</p>';
        }
      } catch (err) {
        console.error("Network or JSON parsing error:", err);
        statusArea.innerHTML = '<p class="text-red-500 mt-2 text-center">Network Error: Could not connect to the server.</p>';
      }
    }

    // --- Removed Polling Logic ---

    document.getElementById('menu-btn').addEventListener('click', () => {
      document.querySelector('aside').classList.toggle('hidden');
    });

    window.viewAndClearFlag = viewAndClearFlag;
    window.showFullHistory = showFullHistory;
    window.payNow = payNow;
    
    // Initial call to start the process (NO POLLING)
    checkAndRenderBillCard();
  </script>
</body>
</html>
