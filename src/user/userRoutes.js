const express = require("express");
const User = require("../../models/User");
const router = express.Router();
const bcrypt = require("bcrypt");
const Notification = require("../../models/notification");

// ---------------- Utility: Attendance (FIXED: Moved to top) ----------------
function calculateMonthlyAttendance(registrationDate, leaves = []) {
Â  const today = new Date();
Â  today.setHours(0, 0, 0, 0); // Normalize today to the start of the day
Â  
Â  const regDate = new Date(registrationDate);
Â  regDate.setHours(0, 0, 0, 0); // Normalize registration date

Â  // Safety check: If registration is in the future, return 0 attendance.
Â  if (regDate > today) {
Â  Â  return {
Â  Â  Â  cycleStart: today.toDateString(),
Â  Â  Â  cycleEnd: today.toDateString(),
Â  Â  Â  presentDays: 0,
Â  Â  Â  messCutDays: 0,
Â  Â  Â  waitingApprovalDays: 0,
Â  Â  Â  totalDays: 0
Â  Â  };
Â  }

Â  // Define current date components
Â  const currentMonth = today.getMonth();
Â  const currentYear = today.getFullYear();

Â  // 1. Determine the Cycle Start Date (Start of the attendance period)
Â  let cycleStart = new Date(currentYear, currentMonth, 1);
Â  cycleStart.setHours(0, 0, 0, 0);

Â  // Rule: If registration happened in the *current* month, attendance starts on the Reg Date.
Â  // Otherwise, it starts on the 1st of the current calendar month.
Â  if (regDate.getFullYear() === currentYear && regDate.getMonth() === currentMonth) {
Â  Â  cycleStart = regDate;
Â  }

Â  // Attendance is always calculated up to the end of today.
Â  const cycleEnd = today;

Â  // 3. Calculate Total Days in the Cycle (inclusive)
Â  const totalDays = Math.floor((cycleEnd.getTime() - cycleStart.getTime()) / (1000 * 60 * 60 * 24)) + 1;

Â  let messCutDays = 0;
Â  let waitingApprovalDays = 0;

Â  // 4. Count leave days that overlap with the current cycle [cycleStart, cycleEnd]
Â  leaves.forEach((leave) => {
Â  Â  const leaveFrom = new Date(leave.from);
Â  Â  leaveFrom.setHours(0, 0, 0, 0);
Â  Â  const leaveTo = new Date(leave.to);
Â  Â  leaveTo.setHours(0, 0, 0, 0);

Â  Â  // Clip leave interval: the leave can only count if it falls between cycleStart and cycleEnd
Â  Â  const from = leaveFrom < cycleStart ? cycleStart : leaveFrom;
Â  Â  const to = leaveTo > cycleEnd ? cycleEnd : leaveTo;

Â  Â  // Check if there is any overlap
Â  Â  if (from <= to) {
Â  Â  Â  // Calculate difference in days (inclusive)
Â  Â  Â  const diff = Math.floor((to.getTime() - from.getTime()) / (1000 * 60 * 60 * 24)) + 1;

Â  Â  Â  if (leave.approved) messCutDays += diff; 
Â  Â  Â  else waitingApprovalDays += diff; 
Â  Â  }
Â  });

Â  // 5. Calculate Present Days
Â  // Present Days = Total Expected Days - (Approved Leaves + Pending Leaves)
Â  const presentDays = totalDays - (messCutDays + waitingApprovalDays);

Â  return {
Â  Â  cycleStart: cycleStart.toDateString(),
Â  Â  cycleEnd: cycleEnd.toDateString(),
Â  Â  presentDays,
Â  Â  messCutDays,
Â  Â  waitingApprovalDays,
Â  Â  totalDays
Â  };
}
// ---------------- END Utility: Attendance ----------------


// ---------------- Middleware ----------------
const isAuthenticated = (req, res, next) => {
Â  if (req.session.userId) next();
Â  else res.redirect("/login");
};

// Middleware to get unseen count (used in all routes except notifications page)
async function notificationMiddleware(req, res, next) {
Â  try {
Â  Â  const unseenCount = await Notification.countDocuments({ seen: false });
Â  Â  res.locals.notificationCount = unseenCount; // ðŸ‘ˆ available in all hbs
Â  Â  next();
Â  } catch (err) {
Â  Â  next(err);
Â  }
}

// âœ… Apply notification middleware to all routes in this router
router.use(notificationMiddleware);


// New utility function to format and process bill data
function formatBillHistory(billingHistory, name) {
Â  Â  const bills = (billingHistory || [])
Â  Â  Â  Â  .sort((a, b) => new Date(b.date) - new Date(a.date)) // latest first
Â  Â  Â  Â  .map(bill => ({
Â  Â  Â  Â  Â  Â  displayDate: new Date(bill.date).toLocaleDateString('en-US', { month: 'long', year: 'numeric', timeZone: 'UTC' }),
Â  Â  Â  Â  Â  Â  formattedShare: `â‚¹${bill.studentShare.toFixed(2)}`,
Â  Â  Â  Â  Â  Â  formattedRate: `â‚¹${bill.ratePerDay.toFixed(2)}`,
Â  Â  Â  Â  Â  Â  formattedTotalExpense: `â‚¹${bill.totalExpense.toFixed(2)}`,
Â  Â  Â  Â  Â  Â  presentDays: bill.presentDays
Â  Â  Â  Â  }));
Â  Â  
Â  Â  return { name, bills: bills.length ? bills : null };
}


// ---------------- EXISTING ROUTES (ADJUSTED) ----------------

// Dashboard (UNCHANGED)
router.get("/dashboard", isAuthenticated, async (req, res) => {
Â  const foundUser = await User.findOne({ hostelid: req.session.userId });
Â  if (foundUser) res.render("user/student_dashboard", { user: foundUser });
Â  else res.redirect("/login");
});

// Profile (UNCHANGED)
router.get("/profile", isAuthenticated, async (req, res) => {
Â  const foundUser = await User.findOne({ hostelid: req.session.userId });
Â  if (!foundUser) return res.redirect("/login");

Â  Â  const displayDate = foundUser.registrationDate.toLocaleDateString('en-US', {
Â  Â  Â  Â  year: 'numeric',
Â  Â  Â  Â  month: 'short',
Â  Â  Â  Â  day: '2-digit',
Â  Â  Â  Â  timeZone: 'UTC' 
Â  Â  });
Â  Â  
Â  Â  const userForProfile = {
Â  Â  Â  Â  ...foundUser._doc,
Â  Â  Â  Â  registrationDate: displayDate 
Â  Â  };


Â  res.render("user/profile", { user: userForProfile });
});

// Attendance (FIXED: Now can call the function)
router.get("/attendance", isAuthenticated, async (req, res) => {
Â  const foundUser = await User.findOne({ hostelid: req.session.userId });
Â  if (!foundUser) return res.redirect("/login");

Â  const { presentDays, messCutDays, waitingApprovalDays } = calculateMonthlyAttendance(
Â  Â  foundUser.registrationDate,
Â  Â  foundUser.leaves || []
Â  );

Â  res.render("user/attendance", {
Â  Â  name: foundUser.name,
Â  Â  presentDays,
Â  Â  messCutDays,
Â  Â  waitingApprovalDays,
Â  });
});

// Apply Mess Cut (FIXED: Now can call the function)
router.post("/apply-mess-cut", isAuthenticated, async (req, res) => {
Â  const { startDate, endDate } = req.body;
Â  const foundUser = await User.findOne({ hostelid: req.session.userId });
Â  
Â  if (!foundUser) return res.redirect("/login");


// --- START: Date Validation and Adjustment ---
Â  const now = new Date();
Â  const today = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()));
Â  

Â  const tomorrow = new Date(today);
Â  tomorrow.setUTCDate(today.getUTCDate() + 1);


Â  const requestedStart = new Date(startDate);
Â  const requestedEnd = new Date(endDate);
Â  Â  
Â  const requestedStartUTC = new Date(Date.UTC(requestedStart.getFullYear(), requestedStart.getMonth(), requestedStart.getDate()));
Â  Â  
Â  if (requestedEnd < requestedStartUTC) {
Â  Â  Â  Â  return res.send("<script>alert('End date cannot be before the start date.'); window.location.href='/user/mess-cut';</script>");
Â  }


Â  let adjustedStart = requestedStartUTC;
Â  let message = "Leave application submitted successfully, pending admin approval.";


Â  if (requestedStartUTC < tomorrow) {
Â  Â  Â  Â  
Â  Â  adjustedStart = tomorrow;
Â  Â  
if (requestedEnd < adjustedStart) {
Â  Â  Â  Â  return res.send("<script>alert('The minimum notice period is 1 day. Please adjust your dates.'); window.location.href='/user/mess-cut';</script>");
Â  Â  }

Â  Â  const year = adjustedStart.getUTCFullYear();
Â  Â  const month = String(adjustedStart.getUTCMonth() + 1).padStart(2, '0');
Â  Â  const day = String(adjustedStart.getUTCDate()).padStart(2, '0');
Â  Â  const adjustedDateString = `${year}-${month}-${day}`;

Â  Â  message = `Notice period is 1 day. Your leave start date has been automatically adjusted to tomorrow (${adjustedDateString}). It is now pending approval.`;
Â  }

Â  // Process the leave request with the potentially adjusted start date
Â  foundUser.leaves.push({
Â  Â  from: adjustedStart, 
Â  Â  to: requestedEnd,
Â  Â  approved: false,
Â  });
Â  await foundUser.save();


Â  res.send(`<script>alert('${message}'); window.location.href='/user/mess-cut';</script>`);
});

// Mess Cut History (UNCHANGED)
router.get("/mess-cut", isAuthenticated, async (req, res) => {
Â  const foundUser = await User.findOne({ hostelid: req.session.userId });
Â  if (!foundUser) return res.redirect("/login");

Â  res.render("user/mess-cut", { user: foundUser, messCuts: foundUser.leaves });
});


// ---------------- NEW API ENDPOINTS ----------------

// 1. API Endpoint to check if the bill flag is set (for dashboard AJAX check)
router.get("/bill-status", isAuthenticated, async (req, res) => {
Â  Â  try {
Â  Â  Â  Â  const user = await User.findOne({ hostelid: req.session.userId })
Â  Â  Â  Â  Â  Â  .lean()
Â  Â  Â  Â  Â  Â  .select('needsBillRefresh')
Â  Â  Â  Â  Â  Â  .readConcern('majority');

Â  Â  Â  Â  res.json({ billGenerated: user && user.needsBillRefresh });
Â  Â  } catch (err) {
Â  Â  Â  Â  // Must send a valid JSON response even on error so the frontend doesn't crash
Â  Â  Â  Â  res.status(500).json({ billGenerated: false, error: err.message });
Â  Â  }
});


// 2. API Endpoint to fetch the latest bill data and CLEAR the flag
router.get("/fetch-latest-bill-data", isAuthenticated, async (req, res) => {
Â  Â  try {
Â  Â  Â  Â  // Atomic operation: find the user, reset the flag, and return the new user document
Â  Â  Â  Â  const foundUser = await User.findOneAndUpdate(
Â  Â  Â  Â  Â  Â  { hostelid: req.session.userId },
Â  Â  Â  Â  Â  Â  { $set: { needsBillRefresh: false } },
Â  Â  Â  Â  Â  Â  // Use 'new: true' to get the fresh document, 'lean: true' for speed, 
Â  Â  Â  Â  Â  Â  // and 'readConcern: majority' for data freshness guarantee.
Â  Â  Â  Â  Â  Â  { new: true, lean: true, select: '-password', readConcern: 'majority' } 
Â  Â  Â  Â  );

Â  Â  Â  Â  if (!foundUser) {
Â  Â  Â  Â  Â  Â  return res.status(404).json({ success: false, message: "User not found." });
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  const billData = formatBillHistory(foundUser.billingHistory, foundUser.name);
Â  Â  Â  Â  
Â  Â  Â  Â  res.json({ success: true, billData });

Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Error fetching latest bill:", err);
Â  Â  Â  Â  res.status(500).json({ success: false, message: "Server error fetching bill." });
Â  Â  }
});




// complaints (UNCHANGED)
router.get("/complaints", isAuthenticated, async (req, res) => {
Â  const foundUser = await User.findOne({ hostelid: req.session.userId });
Â  if (!foundUser) return res.redirect("/login");

Â  res.render("user/complaints", { 
Â  Â  user: foundUser, 
Â  Â  complaints: foundUser.complaints
Â  });
});


router.post("/complaints", isAuthenticated, async (req, res) => {
Â  const { complaint } = req.body;
Â  const foundUser = await User.findOne({ hostelid: req.session.userId });

Â  if (!foundUser) return res.redirect("/login");

Â  foundUser.complaints.push({
Â  Â  text: complaint,
Â  Â  date: new Date(),
Â  Â  status: "Pending"
Â  });

Â  await foundUser.save();

Â  res.redirect("/user/complaints");
});


router.post("/delete-complaint/:hostelid/:complaintId", isAuthenticated, async (req, res) => {
Â  const { hostelid, complaintId } = req.params;

Â  try {
Â  Â  await User.findOneAndUpdate(
Â  Â  Â  { hostelid },
Â  Â  Â  { $pull: { complaints: { _id: complaintId } } }
Â  Â  );

Â  Â  res.redirect("/user/complaints");
Â  } catch (err) {
Â  Â  console.error(err);
Â  Â  res.status(500).send("Server Error");
Â  }
});

// Suggestions (UNCHANGED)
router.get("/suggestions", isAuthenticated, async (req, res) => {
Â  const foundUser = await User.findOne({ hostelid: req.session.userId });
Â  res.render("user/suggestions", {
Â  Â  user: foundUser,
Â  Â  suggestions: foundUser.suggestions,
Â  });
});


router.post("/suggestions", isAuthenticated, async (req, res) => {
Â  const { suggestion } = req.body;
Â  const foundUser = await User.findOne({ hostelid: req.session.userId });
Â  foundUser.suggestions.push({ text: suggestion });
Â  await foundUser.save();

Â  res.redirect("/user/suggestions");
});


router.post("/delete-suggestion/:id", isAuthenticated, async (req, res) => {
Â  const foundUser = await User.findOne({ hostelid: req.session.userId });

Â  Â  foundUser.suggestions = foundUser.suggestions.filter(
Â  Â  (s) => s._id.toString() !== req.params.id
Â  );

Â  await foundUser.save();
Â  res.redirect("/user/suggestions");
});


// Settings (UNCHANGED)
router.get("/settings", isAuthenticated, (req, res) => res.render("user/settings"));

router.post("/change-password", isAuthenticated, async (req, res) => {
Â  const { oldPassword, newPassword, confirmPassword } = req.body;
Â  const foundUser = await User.findOne({ hostelid: req.session.userId });

Â  if (!foundUser) return res.redirect("/login");
Â  if (newPassword !== confirmPassword) {
Â  Â  return res.send("<script>alert('Passwords do not match'); window.location.href='/user/settings';</script>");
Â  }

Â  const isPasswordMatch = await bcrypt.compare(oldPassword, foundUser.password);
Â  if (!isPasswordMatch) {
Â  Â  return res.send("<script>alert('Old password is incorrect'); window.location.href='/user/settings';</script>");
Â  }

Â  foundUser.password = await bcrypt.hash(newPassword, 10);
Â  await foundUser.save();

Â  res.send("<script>alert('Password changed successfully'); window.location.href='/user/settings';</script>");
});


// Mess Bill History (Modified to use the new formatter)
router.get("/mess-bill", isAuthenticated, async (req, res) => {
Â  try {
Â  Â  const foundUser = await User.findOne({ hostelid: req.session.userId }).lean();

Â  Â  if (!foundUser) return res.redirect("/login");

Â  Â  // Use the new function to format the bill data
Â  Â  const { name, bills } = formatBillHistory(foundUser.billingHistory, foundUser.name);

Â  Â  res.render("user/mess-bill", { name, bills: bills });

Â  } catch (err) {
Â  Â  console.error("Error fetching mess bill:", err);
Â  Â  res.status(500).send("Server Error");
Â  }
});

//full history
router.get("/mess-bill1", isAuthenticated, async (req, res) => {
Â  Â  try {
Â  Â  Â  Â  const foundUser = await User.findOne({ hostelid: req.session.userId }).lean();
    
Â  Â  Â  Â  if (!foundUser) return res.redirect("/login");
    
Â  Â  Â  Â  // Use the new function to format the bill data
Â  Â  Â  Â  const { name, bills } = formatBillHistory(foundUser.billingHistory, foundUser.name);
    
Â  Â  Â  Â  // Render the new template
Â  Â  Â  Â  res.render("user/mess-bill1", { name, bills: bills });
    
Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Error fetching full mess bill history:", err);
Â  Â  Â  Â  res.status(500).send("Server Error");
Â  Â  }
});

router.get("/latest-bill-card-data", isAuthenticated, async (req, res) => {
Â  Â  try {
Â  Â  Â  Â  const foundUser = await User.findOne({ hostelid: req.session.userId })
Â  Â  Â  Â  Â  Â  .lean()
Â  Â  Â  Â  Â  Â  .select('billingHistory name needsBillRefresh') 
Â  Â  Â  Â  Â  Â  .readConcern('majority'); 

Â  Â  Â  Â  if (!foundUser) {
Â  Â  Â  Â  Â  Â  return res.status(404).json({ success: false, message: "User not found." });
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  const isNewBill = foundUser.needsBillRefresh;
Â  Â  Â  Â  
Â  Â  Â  Â  // Sort history and get the latest one
Â  Â  Â  Â  const latestBill = foundUser.billingHistory.length > 0
Â  Â  Â  Â  Â  Â  ? foundUser.billingHistory.sort((a, b) => new Date(b.date) - new Date(a.date))[0]
Â  Â  Â  Â  Â  Â  : null;

Â  Â  Â  Â  let billData = null;
Â  Â  Â  Â  if (latestBill) {
Â  Â  Â  Â  Â  Â  Â billData = {
Â  Â  Â  Â  Â  Â  Â  Â  displayDate: new Date(latestBill.date).toLocaleDateString('en-US', { month: 'long', year: 'numeric', timeZone: 'UTC' }),
Â  Â  Â  Â  Â  Â  Â  Â  formattedShare: `â‚¹${latestBill.studentShare.toFixed(2)}`,
Â  Â  Â  Â  Â  Â  Â  Â  presentDays: latestBill.presentDays
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  }

Â  Â  Â  Â  res.json({ success: true, isNewBill, latestBill: billData });

Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Error fetching card data:", err);
Â  Â  Â  Â  res.status(500).json({ success: false, message: "Server error fetching bill card data." });
Â  Â  }
});

router.get("/bill-status", isAuthenticated, async (req, res) => {
Â  Â  try {
Â  Â  Â  Â  const user = await User.findOne({ hostelid: req.session.userId })
Â  Â  Â  Â  Â  Â  .lean()
Â  Â  Â  Â  Â  Â  .select('needsBillRefresh')
Â  Â  Â  Â  Â  Â  .readConcern('majority');

Â  Â  Â  Â  res.json({ billGenerated: user && user.needsBillRefresh });
Â  Â  } catch (err) {
Â  Â  Â  Â  // Must send a valid JSON response even on error so the frontend doesn't crash
Â  Â  Â  Â  res.status(500).json({ billGenerated: false, error: err.message });
Â  Â  }
});


module.exports = { router, notificationMiddleware };